again the binary use get so we try to put a shellcode on the stack and then jump on it
problem is that the binary check the return address and if it is on the stack it will not jump on it
but we can overpass this by first jump on the ret address and then jump on the shellcode

the script 'exploit1.py' work while executed in gdb 
(with 'env - gdb /home/user/level2/level2' and then 'unset env LINES COLUMNS')
Sometimes the stack is different in gdb because of the main arguments and because of the env
that why we should execute with env - and with the absolute path to the exec 
(because argv[0] would be different between 'gdb level2' and './level2')

but even with that it don't work outside of gdb for some reason :)

final solution was to guess where the shellcode was with a bit of bruteforce
see exploit2.py for the final script
